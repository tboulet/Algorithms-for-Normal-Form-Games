algo_name : PAL-FoReL
algo_config :

  # ============ ForeL parameters ============
  forel_config:
    q_value_estimation_method : model-based
    dynamics_method : rd
    learning_rate_rd : 0.001
    learning_rate_cum_values : 0.001
    n_monte_carlo_q_evaluation : 20
    regularizer : entropy
  


  # ============ Population parameters ============
  # The method to use to update the population, either "geometric" or "arithmetic"
  population_averaging : "arithmetic"

  # The number of policies to sample from last policies. If None/unspeficied, all policies will be candidates.
  n_last_policies_to_sample : ${algo.algo_config.n_timesteps_pc_phase}

  # The sampler method and its configuration. Method is either "random", "periodic" or "last" (equivalent to I-FoReL)
  sampler_population:

    # Greedy : successively try to maximize the distance to the average of the already sampled population
    method : "greedy"
    # The size of the population sampled.
    size_population : 10
    # The method when using greedy sampling. Either "to_average" or "to_added_distance".
    greedy_mode: "to_average"
    # Distance metric for distributions that is used for greedy sampling. Can either be "kl", "l1" or "l2"
    distance: "kl"

    # # Random : random sampling from the population
    # method : "random"
    # size_population : 10
    # distribution: "uniform"  # The sampling distribution, only used if the method is "random". Is either "uniform" or "exponential".



  # ============ Population Alternating Lyapunov FoReL parameters ===========
  # How many timesteps to do for each phase
  n_timesteps_pc_phase : 5000
  n_timesteps_lyapunov_phase : 5000

  # The eta scheduler configuration
  eta_scheduler_config:
    class_string : core.scheduler:SquareWave
    max_value : 1
    min_value : 0
    steps_at_min : ${algo.algo_config.n_timesteps_pc_phase}
    steps_at_max : ${algo.algo_config.n_timesteps_lyapunov_phase}
    start_at_max : False